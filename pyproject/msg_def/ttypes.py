#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class world_type_e:
  LAKE = 0
  DESERT = 1
  FOREST = 2
  VOLCANO = 3
  ISLAND = 4
  SKY = 5

  _VALUES_TO_NAMES = {
    0: "LAKE",
    1: "DESERT",
    2: "FOREST",
    3: "VOLCANO",
    4: "ISLAND",
    5: "SKY",
  }

  _NAMES_TO_VALUES = {
    "LAKE": 0,
    "DESERT": 1,
    "FOREST": 2,
    "VOLCANO": 3,
    "ISLAND": 4,
    "SKY": 5,
  }

class client_cmd_e:
  LOGIN_REQ = 1
  CHAT_REQ = 2
  START_ROUND_REQ = 3
  INPUT_REQ = 4
  CHAPTER_DETAIL_REQ = 5
  SELECT_ITEM_BUBBLE_REQ = 6
  TASK_INFO_REQ = 7
  ADD_FRIEND_REQ = 8
  CONFIRM_ADD_FRIEND_REQ = 9
  DEL_FRIEND_REQ = 10
  USE_ITEM_REQ = 11
  BATTLE_CREATE_REQ = 12
  BATTLE_QUIT_REQ = 13
  BATTLE_READY_REQ = 14
  CLICK_BUBBLE_REQ = 15
  GET_FRIEND_LIST_REQ = 16
  BATTLE_INVITE_ACCEPT_REQ = 17
  SEARCH_USER_REQ = 18

  _VALUES_TO_NAMES = {
    1: "LOGIN_REQ",
    2: "CHAT_REQ",
    3: "START_ROUND_REQ",
    4: "INPUT_REQ",
    5: "CHAPTER_DETAIL_REQ",
    6: "SELECT_ITEM_BUBBLE_REQ",
    7: "TASK_INFO_REQ",
    8: "ADD_FRIEND_REQ",
    9: "CONFIRM_ADD_FRIEND_REQ",
    10: "DEL_FRIEND_REQ",
    11: "USE_ITEM_REQ",
    12: "BATTLE_CREATE_REQ",
    13: "BATTLE_QUIT_REQ",
    14: "BATTLE_READY_REQ",
    15: "CLICK_BUBBLE_REQ",
    16: "GET_FRIEND_LIST_REQ",
    17: "BATTLE_INVITE_ACCEPT_REQ",
    18: "SEARCH_USER_REQ",
  }

  _NAMES_TO_VALUES = {
    "LOGIN_REQ": 1,
    "CHAT_REQ": 2,
    "START_ROUND_REQ": 3,
    "INPUT_REQ": 4,
    "CHAPTER_DETAIL_REQ": 5,
    "SELECT_ITEM_BUBBLE_REQ": 6,
    "TASK_INFO_REQ": 7,
    "ADD_FRIEND_REQ": 8,
    "CONFIRM_ADD_FRIEND_REQ": 9,
    "DEL_FRIEND_REQ": 10,
    "USE_ITEM_REQ": 11,
    "BATTLE_CREATE_REQ": 12,
    "BATTLE_QUIT_REQ": 13,
    "BATTLE_READY_REQ": 14,
    "CLICK_BUBBLE_REQ": 15,
    "GET_FRIEND_LIST_REQ": 16,
    "BATTLE_INVITE_ACCEPT_REQ": 17,
    "SEARCH_USER_REQ": 18,
  }

class server_cmd_e:
  LOGIN_RET = 1
  CHAT_RET = 2
  ERROR_CODE_RET = 3
  START_ROUND_RET = 4
  NEXT_WORD_RET = 5
  END_ROUND_RET = 6
  USER_PROPERTY_RET = 7
  PACK_INFO_RET = 8
  FRIEND_INFO_RET = 9
  GAME_INFO_RET = 10
  TASK_INFO_RET = 11
  CHAPTER_DETAIL_RET = 12
  TASK_COMPLETED_RET = 13
  NOTIFY_ADD_FRIEND_RET = 14
  ADD_FRIEND_SUCCESS_RET = 15
  DEL_FRIEND_RET = 16
  UPDATE_PROPERTY_RET = 17
  USE_ITEM_RET = 18
  BATTLE_CREATE_RET = 19
  BATTLE_CLOSE_RET = 20
  BATTLE_READY_RET = 21
  CLICK_BUBBLE_RET = 22
  BATTLE_INVITE_RET = 23
  SEARCH_USER_RET = 24

  _VALUES_TO_NAMES = {
    1: "LOGIN_RET",
    2: "CHAT_RET",
    3: "ERROR_CODE_RET",
    4: "START_ROUND_RET",
    5: "NEXT_WORD_RET",
    6: "END_ROUND_RET",
    7: "USER_PROPERTY_RET",
    8: "PACK_INFO_RET",
    9: "FRIEND_INFO_RET",
    10: "GAME_INFO_RET",
    11: "TASK_INFO_RET",
    12: "CHAPTER_DETAIL_RET",
    13: "TASK_COMPLETED_RET",
    14: "NOTIFY_ADD_FRIEND_RET",
    15: "ADD_FRIEND_SUCCESS_RET",
    16: "DEL_FRIEND_RET",
    17: "UPDATE_PROPERTY_RET",
    18: "USE_ITEM_RET",
    19: "BATTLE_CREATE_RET",
    20: "BATTLE_CLOSE_RET",
    21: "BATTLE_READY_RET",
    22: "CLICK_BUBBLE_RET",
    23: "BATTLE_INVITE_RET",
    24: "SEARCH_USER_RET",
  }

  _NAMES_TO_VALUES = {
    "LOGIN_RET": 1,
    "CHAT_RET": 2,
    "ERROR_CODE_RET": 3,
    "START_ROUND_RET": 4,
    "NEXT_WORD_RET": 5,
    "END_ROUND_RET": 6,
    "USER_PROPERTY_RET": 7,
    "PACK_INFO_RET": 8,
    "FRIEND_INFO_RET": 9,
    "GAME_INFO_RET": 10,
    "TASK_INFO_RET": 11,
    "CHAPTER_DETAIL_RET": 12,
    "TASK_COMPLETED_RET": 13,
    "NOTIFY_ADD_FRIEND_RET": 14,
    "ADD_FRIEND_SUCCESS_RET": 15,
    "DEL_FRIEND_RET": 16,
    "UPDATE_PROPERTY_RET": 17,
    "USE_ITEM_RET": 18,
    "BATTLE_CREATE_RET": 19,
    "BATTLE_CLOSE_RET": 20,
    "BATTLE_READY_RET": 21,
    "CLICK_BUBBLE_RET": 22,
    "BATTLE_INVITE_RET": 23,
    "SEARCH_USER_RET": 24,
  }

class error_code_e:
  OK = 0
  SERVER_ERROR = 1
  INPUT_ERROR = 2
  SERVER_BUSY = 3
  USER_TAKEN = 4
  USER_INVALID = 5
  PASS_INVALID = 6

  _VALUES_TO_NAMES = {
    0: "OK",
    1: "SERVER_ERROR",
    2: "INPUT_ERROR",
    3: "SERVER_BUSY",
    4: "USER_TAKEN",
    5: "USER_INVALID",
    6: "PASS_INVALID",
  }

  _NAMES_TO_VALUES = {
    "OK": 0,
    "SERVER_ERROR": 1,
    "INPUT_ERROR": 2,
    "SERVER_BUSY": 3,
    "USER_TAKEN": 4,
    "USER_INVALID": 5,
    "PASS_INVALID": 6,
  }

class item_type_e:
  ITEM_NONE = 0
  ITEM_TIPS = 1
  ITEM_BROOM = 2
  ITEM_NEXT = 3
  ITEM_TIME = 4
  ITEM_BOMB = 5

  _VALUES_TO_NAMES = {
    0: "ITEM_NONE",
    1: "ITEM_TIPS",
    2: "ITEM_BROOM",
    3: "ITEM_NEXT",
    4: "ITEM_TIME",
    5: "ITEM_BOMB",
  }

  _NAMES_TO_VALUES = {
    "ITEM_NONE": 0,
    "ITEM_TIPS": 1,
    "ITEM_BROOM": 2,
    "ITEM_NEXT": 3,
    "ITEM_TIME": 4,
    "ITEM_BOMB": 5,
  }


class account_req_t:
  """
  Attributes:
   - nick_name
   - password
   - register_flag
   - email
   - real_name
   - age
   - school
   - grade
   - qq
   - phone
   - address
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'nick_name', None, None, ), # 1
    (2, TType.STRING, 'password', None, None, ), # 2
    (3, TType.BOOL, 'register_flag', None, False, ), # 3
    (4, TType.STRING, 'email', None, None, ), # 4
    (5, TType.STRING, 'real_name', None, None, ), # 5
    (6, TType.I16, 'age', None, 0, ), # 6
    (7, TType.STRING, 'school', None, None, ), # 7
    (8, TType.STRING, 'grade', None, None, ), # 8
    (9, TType.STRING, 'qq', None, None, ), # 9
    (10, TType.STRING, 'phone', None, None, ), # 10
    (11, TType.STRING, 'address', None, None, ), # 11
  )

  def __init__(self, nick_name=None, password=None, register_flag=thrift_spec[3][4], email=None, real_name=None, age=thrift_spec[6][4], school=None, grade=None, qq=None, phone=None, address=None,):
    self.nick_name = nick_name
    self.password = password
    self.register_flag = register_flag
    self.email = email
    self.real_name = real_name
    self.age = age
    self.school = school
    self.grade = grade
    self.qq = qq
    self.phone = phone
    self.address = address

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.nick_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.password = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.register_flag = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.email = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.real_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I16:
          self.age = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.school = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.grade = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.qq = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.phone = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.address = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('account_req_t')
    if self.nick_name is not None:
      oprot.writeFieldBegin('nick_name', TType.STRING, 1)
      oprot.writeString(self.nick_name)
      oprot.writeFieldEnd()
    if self.password is not None:
      oprot.writeFieldBegin('password', TType.STRING, 2)
      oprot.writeString(self.password)
      oprot.writeFieldEnd()
    if self.register_flag is not None:
      oprot.writeFieldBegin('register_flag', TType.BOOL, 3)
      oprot.writeBool(self.register_flag)
      oprot.writeFieldEnd()
    if self.email is not None:
      oprot.writeFieldBegin('email', TType.STRING, 4)
      oprot.writeString(self.email)
      oprot.writeFieldEnd()
    if self.real_name is not None:
      oprot.writeFieldBegin('real_name', TType.STRING, 5)
      oprot.writeString(self.real_name)
      oprot.writeFieldEnd()
    if self.age is not None:
      oprot.writeFieldBegin('age', TType.I16, 6)
      oprot.writeI16(self.age)
      oprot.writeFieldEnd()
    if self.school is not None:
      oprot.writeFieldBegin('school', TType.STRING, 7)
      oprot.writeString(self.school)
      oprot.writeFieldEnd()
    if self.grade is not None:
      oprot.writeFieldBegin('grade', TType.STRING, 8)
      oprot.writeString(self.grade)
      oprot.writeFieldEnd()
    if self.qq is not None:
      oprot.writeFieldBegin('qq', TType.STRING, 9)
      oprot.writeString(self.qq)
      oprot.writeFieldEnd()
    if self.phone is not None:
      oprot.writeFieldBegin('phone', TType.STRING, 10)
      oprot.writeString(self.phone)
      oprot.writeFieldEnd()
    if self.address is not None:
      oprot.writeFieldBegin('address', TType.STRING, 11)
      oprot.writeString(self.address)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class chat_msg_req_t:
  """
  Attributes:
   - channel
   - player_uid
   - player_name
   - msg
   - emotions
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'channel', None, 0, ), # 1
    (2, TType.I32, 'player_uid', None, 0, ), # 2
    (3, TType.STRING, 'player_name', None, None, ), # 3
    (4, TType.STRING, 'msg', None, None, ), # 4
    (5, TType.MAP, 'emotions', (TType.I32,None,TType.I32,None), None, ), # 5
  )

  def __init__(self, channel=thrift_spec[1][4], player_uid=thrift_spec[2][4], player_name=None, msg=None, emotions=None,):
    self.channel = channel
    self.player_uid = player_uid
    self.player_name = player_name
    self.msg = msg
    self.emotions = emotions

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.channel = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.player_uid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.player_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.msg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.MAP:
          self.emotions = {}
          (_ktype1, _vtype2, _size0 ) = iprot.readMapBegin()
          for _i4 in xrange(_size0):
            _key5 = iprot.readI32();
            _val6 = iprot.readI32();
            self.emotions[_key5] = _val6
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('chat_msg_req_t')
    if self.channel is not None:
      oprot.writeFieldBegin('channel', TType.I32, 1)
      oprot.writeI32(self.channel)
      oprot.writeFieldEnd()
    if self.player_uid is not None:
      oprot.writeFieldBegin('player_uid', TType.I32, 2)
      oprot.writeI32(self.player_uid)
      oprot.writeFieldEnd()
    if self.player_name is not None:
      oprot.writeFieldBegin('player_name', TType.STRING, 3)
      oprot.writeString(self.player_name)
      oprot.writeFieldEnd()
    if self.msg is not None:
      oprot.writeFieldBegin('msg', TType.STRING, 4)
      oprot.writeString(self.msg)
      oprot.writeFieldEnd()
    if self.emotions is not None:
      oprot.writeFieldBegin('emotions', TType.MAP, 5)
      oprot.writeMapBegin(TType.I32, TType.I32, len(self.emotions))
      for kiter7,viter8 in self.emotions.items():
        oprot.writeI32(kiter7)
        oprot.writeI32(viter8)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class property_info_t:
  """
  Attributes:
   - level
   - exp
   - coin
   - right_words_num
   - wrong_words_num
   - nick_name
   - phone
   - email
   - adress
   - school
   - grade
   - qq
   - real_name
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'level', None, 0, ), # 1
    (2, TType.I32, 'exp', None, 0, ), # 2
    (3, TType.I32, 'coin', None, 0, ), # 3
    (4, TType.I32, 'right_words_num', None, 0, ), # 4
    (5, TType.I32, 'wrong_words_num', None, 0, ), # 5
    (6, TType.STRING, 'nick_name', None, None, ), # 6
    (7, TType.STRING, 'phone', None, None, ), # 7
    (8, TType.STRING, 'email', None, None, ), # 8
    (9, TType.STRING, 'adress', None, None, ), # 9
    (10, TType.STRING, 'school', None, None, ), # 10
    (11, TType.STRING, 'grade', None, None, ), # 11
    (12, TType.STRING, 'qq', None, None, ), # 12
    (13, TType.STRING, 'real_name', None, None, ), # 13
  )

  def __init__(self, level=thrift_spec[1][4], exp=thrift_spec[2][4], coin=thrift_spec[3][4], right_words_num=thrift_spec[4][4], wrong_words_num=thrift_spec[5][4], nick_name=None, phone=None, email=None, adress=None, school=None, grade=None, qq=None, real_name=None,):
    self.level = level
    self.exp = exp
    self.coin = coin
    self.right_words_num = right_words_num
    self.wrong_words_num = wrong_words_num
    self.nick_name = nick_name
    self.phone = phone
    self.email = email
    self.adress = adress
    self.school = school
    self.grade = grade
    self.qq = qq
    self.real_name = real_name

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.level = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.exp = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.coin = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.right_words_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.wrong_words_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.nick_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.phone = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.email = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.adress = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.school = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.grade = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.qq = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.real_name = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('property_info_t')
    if self.level is not None:
      oprot.writeFieldBegin('level', TType.I32, 1)
      oprot.writeI32(self.level)
      oprot.writeFieldEnd()
    if self.exp is not None:
      oprot.writeFieldBegin('exp', TType.I32, 2)
      oprot.writeI32(self.exp)
      oprot.writeFieldEnd()
    if self.coin is not None:
      oprot.writeFieldBegin('coin', TType.I32, 3)
      oprot.writeI32(self.coin)
      oprot.writeFieldEnd()
    if self.right_words_num is not None:
      oprot.writeFieldBegin('right_words_num', TType.I32, 4)
      oprot.writeI32(self.right_words_num)
      oprot.writeFieldEnd()
    if self.wrong_words_num is not None:
      oprot.writeFieldBegin('wrong_words_num', TType.I32, 5)
      oprot.writeI32(self.wrong_words_num)
      oprot.writeFieldEnd()
    if self.nick_name is not None:
      oprot.writeFieldBegin('nick_name', TType.STRING, 6)
      oprot.writeString(self.nick_name)
      oprot.writeFieldEnd()
    if self.phone is not None:
      oprot.writeFieldBegin('phone', TType.STRING, 7)
      oprot.writeString(self.phone)
      oprot.writeFieldEnd()
    if self.email is not None:
      oprot.writeFieldBegin('email', TType.STRING, 8)
      oprot.writeString(self.email)
      oprot.writeFieldEnd()
    if self.adress is not None:
      oprot.writeFieldBegin('adress', TType.STRING, 9)
      oprot.writeString(self.adress)
      oprot.writeFieldEnd()
    if self.school is not None:
      oprot.writeFieldBegin('school', TType.STRING, 10)
      oprot.writeString(self.school)
      oprot.writeFieldEnd()
    if self.grade is not None:
      oprot.writeFieldBegin('grade', TType.STRING, 11)
      oprot.writeString(self.grade)
      oprot.writeFieldEnd()
    if self.qq is not None:
      oprot.writeFieldBegin('qq', TType.STRING, 12)
      oprot.writeString(self.qq)
      oprot.writeFieldEnd()
    if self.real_name is not None:
      oprot.writeFieldBegin('real_name', TType.STRING, 13)
      oprot.writeString(self.real_name)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class item_t:
  """
  Attributes:
   - item_type
   - item_num
  """

  thrift_spec = (
    None, # 0
    None, # 1
    (2, TType.I32, 'item_type', None, 0, ), # 2
    (3, TType.I32, 'item_num', None, 1, ), # 3
  )

  def __init__(self, item_type=thrift_spec[2][4], item_num=thrift_spec[3][4],):
    self.item_type = item_type
    self.item_num = item_num

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 2:
        if ftype == TType.I32:
          self.item_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.item_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('item_t')
    if self.item_type is not None:
      oprot.writeFieldBegin('item_type', TType.I32, 2)
      oprot.writeI32(self.item_type)
      oprot.writeFieldEnd()
    if self.item_num is not None:
      oprot.writeFieldBegin('item_num', TType.I32, 3)
      oprot.writeI32(self.item_num)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class pack_info_t:
  """
  Attributes:
   - item_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'item_list', (TType.STRUCT,(item_t, item_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, item_list=None,):
    self.item_list = item_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.item_list = []
          (_etype12, _size9) = iprot.readListBegin()
          for _i13 in xrange(_size9):
            _elem14 = item_t()
            _elem14.read(iprot)
            self.item_list.append(_elem14)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('pack_info_t')
    if self.item_list is not None:
      oprot.writeFieldBegin('item_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.item_list))
      for iter15 in self.item_list:
        iter15.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class friend_t:
  """
  Attributes:
   - uid
   - name
   - status
   - grade
   - level
   - gender
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'uid', None, 0, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.I16, 'status', None, 0, ), # 3
    (4, TType.STRING, 'grade', None, None, ), # 4
    (5, TType.I32, 'level', None, 0, ), # 5
    (6, TType.I16, 'gender', None, 0, ), # 6
  )

  def __init__(self, uid=thrift_spec[1][4], name=None, status=thrift_spec[3][4], grade=None, level=thrift_spec[5][4], gender=thrift_spec[6][4],):
    self.uid = uid
    self.name = name
    self.status = status
    self.grade = grade
    self.level = level
    self.gender = gender

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.uid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.status = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.grade = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.level = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I16:
          self.gender = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('friend_t')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I32, 1)
      oprot.writeI32(self.uid)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I16, 3)
      oprot.writeI16(self.status)
      oprot.writeFieldEnd()
    if self.grade is not None:
      oprot.writeFieldBegin('grade', TType.STRING, 4)
      oprot.writeString(self.grade)
      oprot.writeFieldEnd()
    if self.level is not None:
      oprot.writeFieldBegin('level', TType.I32, 5)
      oprot.writeI32(self.level)
      oprot.writeFieldEnd()
    if self.gender is not None:
      oprot.writeFieldBegin('gender', TType.I16, 6)
      oprot.writeI16(self.gender)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class friend_info_t:
  """
  Attributes:
   - friend_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'friend_list', (TType.STRUCT,(friend_t, friend_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, friend_list=None,):
    self.friend_list = friend_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.friend_list = []
          (_etype19, _size16) = iprot.readListBegin()
          for _i20 in xrange(_size16):
            _elem21 = friend_t()
            _elem21.read(iprot)
            self.friend_list.append(_elem21)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('friend_info_t')
    if self.friend_list is not None:
      oprot.writeFieldBegin('friend_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.friend_list))
      for iter22 in self.friend_list:
        iter22.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_friend_list_req_t:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_friend_list_req_t')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class add_friend_req_t:
  """
  Attributes:
   - name
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
  )

  def __init__(self, name=None,):
    self.name = name

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('add_friend_req_t')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class notify_add_friend_ret_t:
  """
  Attributes:
   - uid
   - name
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'uid', None, 0, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
  )

  def __init__(self, uid=thrift_spec[1][4], name=None,):
    self.uid = uid
    self.name = name

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.uid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('notify_add_friend_ret_t')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I32, 1)
      oprot.writeI32(self.uid)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class confirm_add_friend_req_t:
  """
  Attributes:
   - uid
   - permit_flag
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'uid', None, 0, ), # 1
    (2, TType.BOOL, 'permit_flag', None, False, ), # 2
  )

  def __init__(self, uid=thrift_spec[1][4], permit_flag=thrift_spec[2][4],):
    self.uid = uid
    self.permit_flag = permit_flag

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.uid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.permit_flag = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('confirm_add_friend_req_t')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I32, 1)
      oprot.writeI32(self.uid)
      oprot.writeFieldEnd()
    if self.permit_flag is not None:
      oprot.writeFieldBegin('permit_flag', TType.BOOL, 2)
      oprot.writeBool(self.permit_flag)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class add_friends_success_ret_t:
  """
  Attributes:
   - uid
   - name
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'uid', None, 0, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
  )

  def __init__(self, uid=thrift_spec[1][4], name=None,):
    self.uid = uid
    self.name = name

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.uid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('add_friends_success_ret_t')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I32, 1)
      oprot.writeI32(self.uid)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class del_friend_req_t:
  """
  Attributes:
   - uid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'uid', None, 0, ), # 1
  )

  def __init__(self, uid=thrift_spec[1][4],):
    self.uid = uid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.uid = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('del_friend_req_t')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I32, 1)
      oprot.writeI32(self.uid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class del_friend_ret_t:
  """
  Attributes:
   - uid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'uid', None, 0, ), # 1
  )

  def __init__(self, uid=thrift_spec[1][4],):
    self.uid = uid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.uid = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('del_friend_ret_t')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I32, 1)
      oprot.writeI32(self.uid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class task_t:
  """
  Attributes:
   - task_id
   - task_type
   - desc
   - status
   - progress
   - coin_award
   - exp_award
   - item_award
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'task_id', None, 0, ), # 1
    (2, TType.I32, 'task_type', None, 0, ), # 2
    (3, TType.STRING, 'desc', None, None, ), # 3
    (4, TType.I32, 'status', None, 0, ), # 4
    (5, TType.MAP, 'progress', (TType.I32,None,TType.LIST,(TType.I32,None)), None, ), # 5
    (6, TType.I32, 'coin_award', None, 0, ), # 6
    (7, TType.I32, 'exp_award', None, 0, ), # 7
    (8, TType.MAP, 'item_award', (TType.I32,None,TType.I32,None), None, ), # 8
  )

  def __init__(self, task_id=thrift_spec[1][4], task_type=thrift_spec[2][4], desc=None, status=thrift_spec[4][4], progress=None, coin_award=thrift_spec[6][4], exp_award=thrift_spec[7][4], item_award=None,):
    self.task_id = task_id
    self.task_type = task_type
    self.desc = desc
    self.status = status
    self.progress = progress
    self.coin_award = coin_award
    self.exp_award = exp_award
    self.item_award = item_award

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.task_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.task_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.desc = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.MAP:
          self.progress = {}
          (_ktype24, _vtype25, _size23 ) = iprot.readMapBegin()
          for _i27 in xrange(_size23):
            _key28 = iprot.readI32();
            _val29 = []
            (_etype33, _size30) = iprot.readListBegin()
            for _i34 in xrange(_size30):
              _elem35 = iprot.readI32();
              _val29.append(_elem35)
            iprot.readListEnd()
            self.progress[_key28] = _val29
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.coin_award = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.exp_award = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.MAP:
          self.item_award = {}
          (_ktype37, _vtype38, _size36 ) = iprot.readMapBegin()
          for _i40 in xrange(_size36):
            _key41 = iprot.readI32();
            _val42 = iprot.readI32();
            self.item_award[_key41] = _val42
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('task_t')
    if self.task_id is not None:
      oprot.writeFieldBegin('task_id', TType.I32, 1)
      oprot.writeI32(self.task_id)
      oprot.writeFieldEnd()
    if self.task_type is not None:
      oprot.writeFieldBegin('task_type', TType.I32, 2)
      oprot.writeI32(self.task_type)
      oprot.writeFieldEnd()
    if self.desc is not None:
      oprot.writeFieldBegin('desc', TType.STRING, 3)
      oprot.writeString(self.desc)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 4)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.progress is not None:
      oprot.writeFieldBegin('progress', TType.MAP, 5)
      oprot.writeMapBegin(TType.I32, TType.LIST, len(self.progress))
      for kiter43,viter44 in self.progress.items():
        oprot.writeI32(kiter43)
        oprot.writeListBegin(TType.I32, len(viter44))
        for iter45 in viter44:
          oprot.writeI32(iter45)
        oprot.writeListEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.coin_award is not None:
      oprot.writeFieldBegin('coin_award', TType.I32, 6)
      oprot.writeI32(self.coin_award)
      oprot.writeFieldEnd()
    if self.exp_award is not None:
      oprot.writeFieldBegin('exp_award', TType.I32, 7)
      oprot.writeI32(self.exp_award)
      oprot.writeFieldEnd()
    if self.item_award is not None:
      oprot.writeFieldBegin('item_award', TType.MAP, 8)
      oprot.writeMapBegin(TType.I32, TType.I32, len(self.item_award))
      for kiter46,viter47 in self.item_award.items():
        oprot.writeI32(kiter46)
        oprot.writeI32(viter47)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class task_info_t:
  """
  Attributes:
   - task_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'task_list', (TType.STRUCT,(task_t, task_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, task_list=None,):
    self.task_list = task_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.task_list = []
          (_etype51, _size48) = iprot.readListBegin()
          for _i52 in xrange(_size48):
            _elem53 = task_t()
            _elem53.read(iprot)
            self.task_list.append(_elem53)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('task_info_t')
    if self.task_list is not None:
      oprot.writeFieldBegin('task_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.task_list))
      for iter54 in self.task_list:
        iter54.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class task_info_req_t:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('task_info_req_t')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class task_completed_ret_t:
  """
  Attributes:
   - task_id
   - coin_award
   - exp_award
   - item_award
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'task_id', None, 0, ), # 1
    (2, TType.I32, 'coin_award', None, 0, ), # 2
    (3, TType.I32, 'exp_award', None, 0, ), # 3
    (4, TType.MAP, 'item_award', (TType.I32,None,TType.I32,None), None, ), # 4
  )

  def __init__(self, task_id=thrift_spec[1][4], coin_award=thrift_spec[2][4], exp_award=thrift_spec[3][4], item_award=None,):
    self.task_id = task_id
    self.coin_award = coin_award
    self.exp_award = exp_award
    self.item_award = item_award

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.task_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.coin_award = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.exp_award = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.item_award = {}
          (_ktype56, _vtype57, _size55 ) = iprot.readMapBegin()
          for _i59 in xrange(_size55):
            _key60 = iprot.readI32();
            _val61 = iprot.readI32();
            self.item_award[_key60] = _val61
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('task_completed_ret_t')
    if self.task_id is not None:
      oprot.writeFieldBegin('task_id', TType.I32, 1)
      oprot.writeI32(self.task_id)
      oprot.writeFieldEnd()
    if self.coin_award is not None:
      oprot.writeFieldBegin('coin_award', TType.I32, 2)
      oprot.writeI32(self.coin_award)
      oprot.writeFieldEnd()
    if self.exp_award is not None:
      oprot.writeFieldBegin('exp_award', TType.I32, 3)
      oprot.writeI32(self.exp_award)
      oprot.writeFieldEnd()
    if self.item_award is not None:
      oprot.writeFieldBegin('item_award', TType.MAP, 4)
      oprot.writeMapBegin(TType.I32, TType.I32, len(self.item_award))
      for kiter62,viter63 in self.item_award.items():
        oprot.writeI32(kiter62)
        oprot.writeI32(viter63)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class chapter_info_t:
  """
  Attributes:
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'status', None, 0, ), # 1
  )

  def __init__(self, status=thrift_spec[1][4],):
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.status = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('chapter_info_t')
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I16, 1)
      oprot.writeI16(self.status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class game_info_ret_t:
  """
  Attributes:
   - all_chapter_info
  """

  thrift_spec = (
    None, # 0
    (1, TType.MAP, 'all_chapter_info', (TType.I32,None,TType.STRUCT,(chapter_info_t, chapter_info_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, all_chapter_info=None,):
    self.all_chapter_info = all_chapter_info

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.MAP:
          self.all_chapter_info = {}
          (_ktype65, _vtype66, _size64 ) = iprot.readMapBegin()
          for _i68 in xrange(_size64):
            _key69 = iprot.readI32();
            _val70 = chapter_info_t()
            _val70.read(iprot)
            self.all_chapter_info[_key69] = _val70
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('game_info_ret_t')
    if self.all_chapter_info is not None:
      oprot.writeFieldBegin('all_chapter_info', TType.MAP, 1)
      oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.all_chapter_info))
      for kiter71,viter72 in self.all_chapter_info.items():
        oprot.writeI32(kiter71)
        viter72.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class round_info_t:
  """
  Attributes:
   - round_id
   - status
   - star_num
   - rount_type
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'round_id', None, None, ), # 1
    (2, TType.I16, 'status', None, 0, ), # 2
    (3, TType.I16, 'star_num', None, 0, ), # 3
    (4, TType.I16, 'rount_type', None, 0, ), # 4
  )

  def __init__(self, round_id=None, status=thrift_spec[2][4], star_num=thrift_spec[3][4], rount_type=thrift_spec[4][4],):
    self.round_id = round_id
    self.status = status
    self.star_num = star_num
    self.rount_type = rount_type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.round_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.status = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.star_num = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.rount_type = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('round_info_t')
    if self.round_id is not None:
      oprot.writeFieldBegin('round_id', TType.I32, 1)
      oprot.writeI32(self.round_id)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I16, 2)
      oprot.writeI16(self.status)
      oprot.writeFieldEnd()
    if self.star_num is not None:
      oprot.writeFieldBegin('star_num', TType.I16, 3)
      oprot.writeI16(self.star_num)
      oprot.writeFieldEnd()
    if self.rount_type is not None:
      oprot.writeFieldBegin('rount_type', TType.I16, 4)
      oprot.writeI16(self.rount_type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class round_group_info_t:
  """
  Attributes:
   - round_id
   - status
   - round_info
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'round_id', None, 0, ), # 1
    None, # 2
    (3, TType.I16, 'status', None, 0, ), # 3
    (4, TType.LIST, 'round_info', (TType.STRUCT,(round_info_t, round_info_t.thrift_spec)), None, ), # 4
  )

  def __init__(self, round_id=thrift_spec[1][4], status=thrift_spec[3][4], round_info=None,):
    self.round_id = round_id
    self.status = status
    self.round_info = round_info

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.round_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.status = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.round_info = []
          (_etype76, _size73) = iprot.readListBegin()
          for _i77 in xrange(_size73):
            _elem78 = round_info_t()
            _elem78.read(iprot)
            self.round_info.append(_elem78)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('round_group_info_t')
    if self.round_id is not None:
      oprot.writeFieldBegin('round_id', TType.I32, 1)
      oprot.writeI32(self.round_id)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I16, 3)
      oprot.writeI16(self.status)
      oprot.writeFieldEnd()
    if self.round_info is not None:
      oprot.writeFieldBegin('round_info', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.round_info))
      for iter79 in self.round_info:
        iter79.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class chapter_detail_ret_t:
  """
  Attributes:
   - chapter_type
   - round_group_info
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'chapter_type', None, 0, ), # 1
    (2, TType.LIST, 'round_group_info', (TType.STRUCT,(round_group_info_t, round_group_info_t.thrift_spec)), None, ), # 2
  )

  def __init__(self, chapter_type=thrift_spec[1][4], round_group_info=None,):
    self.chapter_type = chapter_type
    self.round_group_info = round_group_info

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.chapter_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.round_group_info = []
          (_etype83, _size80) = iprot.readListBegin()
          for _i84 in xrange(_size80):
            _elem85 = round_group_info_t()
            _elem85.read(iprot)
            self.round_group_info.append(_elem85)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('chapter_detail_ret_t')
    if self.chapter_type is not None:
      oprot.writeFieldBegin('chapter_type', TType.I32, 1)
      oprot.writeI32(self.chapter_type)
      oprot.writeFieldEnd()
    if self.round_group_info is not None:
      oprot.writeFieldBegin('round_group_info', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.round_group_info))
      for iter86 in self.round_group_info:
        iter86.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class chapter_detail_req_t:
  """
  Attributes:
   - chapter_type
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'chapter_type', None, 0, ), # 1
  )

  def __init__(self, chapter_type=thrift_spec[1][4],):
    self.chapter_type = chapter_type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.chapter_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('chapter_detail_req_t')
    if self.chapter_type is not None:
      oprot.writeFieldBegin('chapter_type', TType.I32, 1)
      oprot.writeI32(self.chapter_type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class user_login_ret_t:
  """
  Attributes:
   - uid
   - property_info
   - server_time
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'uid', None, 0, ), # 1
    (2, TType.STRUCT, 'property_info', (property_info_t, property_info_t.thrift_spec), None, ), # 2
    (3, TType.I32, 'server_time', None, 0, ), # 3
  )

  def __init__(self, uid=thrift_spec[1][4], property_info=None, server_time=thrift_spec[3][4],):
    self.uid = uid
    self.property_info = property_info
    self.server_time = server_time

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.uid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.property_info = property_info_t()
          self.property_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.server_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('user_login_ret_t')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I32, 1)
      oprot.writeI32(self.uid)
      oprot.writeFieldEnd()
    if self.property_info is not None:
      oprot.writeFieldBegin('property_info', TType.STRUCT, 2)
      self.property_info.write(oprot)
      oprot.writeFieldEnd()
    if self.server_time is not None:
      oprot.writeFieldBegin('server_time', TType.I32, 3)
      oprot.writeI32(self.server_time)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class chat_msg_ret_t:
  """
  Attributes:
   - channel
   - from_player_uid
   - from_player_name
   - msg
   - emotions
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'channel', None, 0, ), # 1
    (2, TType.I32, 'from_player_uid', None, 0, ), # 2
    (3, TType.STRING, 'from_player_name', None, None, ), # 3
    None, # 4
    None, # 5
    (6, TType.STRING, 'msg', None, None, ), # 6
    (7, TType.MAP, 'emotions', (TType.I32,None,TType.I32,None), None, ), # 7
  )

  def __init__(self, channel=thrift_spec[1][4], from_player_uid=thrift_spec[2][4], from_player_name=None, msg=None, emotions=None,):
    self.channel = channel
    self.from_player_uid = from_player_uid
    self.from_player_name = from_player_name
    self.msg = msg
    self.emotions = emotions

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.channel = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.from_player_uid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.from_player_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.msg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.MAP:
          self.emotions = {}
          (_ktype88, _vtype89, _size87 ) = iprot.readMapBegin()
          for _i91 in xrange(_size87):
            _key92 = iprot.readI32();
            _val93 = iprot.readI32();
            self.emotions[_key92] = _val93
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('chat_msg_ret_t')
    if self.channel is not None:
      oprot.writeFieldBegin('channel', TType.I32, 1)
      oprot.writeI32(self.channel)
      oprot.writeFieldEnd()
    if self.from_player_uid is not None:
      oprot.writeFieldBegin('from_player_uid', TType.I32, 2)
      oprot.writeI32(self.from_player_uid)
      oprot.writeFieldEnd()
    if self.from_player_name is not None:
      oprot.writeFieldBegin('from_player_name', TType.STRING, 3)
      oprot.writeString(self.from_player_name)
      oprot.writeFieldEnd()
    if self.msg is not None:
      oprot.writeFieldBegin('msg', TType.STRING, 6)
      oprot.writeString(self.msg)
      oprot.writeFieldEnd()
    if self.emotions is not None:
      oprot.writeFieldBegin('emotions', TType.MAP, 7)
      oprot.writeMapBegin(TType.I32, TType.I32, len(self.emotions))
      for kiter94,viter95 in self.emotions.items():
        oprot.writeI32(kiter94)
        oprot.writeI32(viter95)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class error_code_ret_t:
  """
  Attributes:
   - error_code
   - error_msg
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'error_code', None, 0, ), # 1
    (2, TType.STRING, 'error_msg', None, None, ), # 2
  )

  def __init__(self, error_code=thrift_spec[1][4], error_msg=None,):
    self.error_code = error_code
    self.error_msg = error_msg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.error_code = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.error_msg = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('error_code_ret_t')
    if self.error_code is not None:
      oprot.writeFieldBegin('error_code', TType.I32, 1)
      oprot.writeI32(self.error_code)
      oprot.writeFieldEnd()
    if self.error_msg is not None:
      oprot.writeFieldBegin('error_msg', TType.STRING, 2)
      oprot.writeString(self.error_msg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class start_round_req_t:
  """
  Attributes:
   - round_type
   - round_group_id
   - round_id
   - mode
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'round_type', None, 0, ), # 1
    (2, TType.I16, 'round_group_id', None, 0, ), # 2
    (3, TType.I16, 'round_id', None, 0, ), # 3
    (4, TType.I16, 'mode', None, 0, ), # 4
  )

  def __init__(self, round_type=thrift_spec[1][4], round_group_id=thrift_spec[2][4], round_id=thrift_spec[3][4], mode=thrift_spec[4][4],):
    self.round_type = round_type
    self.round_group_id = round_group_id
    self.round_id = round_id
    self.mode = mode

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.round_type = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.round_group_id = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.round_id = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.mode = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('start_round_req_t')
    if self.round_type is not None:
      oprot.writeFieldBegin('round_type', TType.I16, 1)
      oprot.writeI16(self.round_type)
      oprot.writeFieldEnd()
    if self.round_group_id is not None:
      oprot.writeFieldBegin('round_group_id', TType.I16, 2)
      oprot.writeI16(self.round_group_id)
      oprot.writeFieldEnd()
    if self.round_id is not None:
      oprot.writeFieldBegin('round_id', TType.I16, 3)
      oprot.writeI16(self.round_id)
      oprot.writeFieldEnd()
    if self.mode is not None:
      oprot.writeFieldBegin('mode', TType.I16, 4)
      oprot.writeI16(self.mode)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class bubble_info_t:
  """
  Attributes:
   - bubble_id
   - word
   - item_type
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'bubble_id', None, 0, ), # 1
    (2, TType.STRING, 'word', None, None, ), # 2
    (3, TType.I16, 'item_type', None, 0, ), # 3
  )

  def __init__(self, bubble_id=thrift_spec[1][4], word=None, item_type=thrift_spec[3][4],):
    self.bubble_id = bubble_id
    self.word = word
    self.item_type = item_type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.bubble_id = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.word = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.item_type = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('bubble_info_t')
    if self.bubble_id is not None:
      oprot.writeFieldBegin('bubble_id', TType.I16, 1)
      oprot.writeI16(self.bubble_id)
      oprot.writeFieldEnd()
    if self.word is not None:
      oprot.writeFieldBegin('word', TType.STRING, 2)
      oprot.writeString(self.word)
      oprot.writeFieldEnd()
    if self.item_type is not None:
      oprot.writeFieldBegin('item_type', TType.I16, 3)
      oprot.writeI16(self.item_type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class start_round_ret_t:
  """
  Attributes:
   - mode
   - chinese_words
   - blank
   - bubble_info
   - bubble_item
   - round_type
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'mode', None, 0, ), # 1
    (2, TType.LIST, 'chinese_words', (TType.STRING,None), None, ), # 2
    (3, TType.LIST, 'blank', (TType.I32,None), None, ), # 3
    (4, TType.LIST, 'bubble_info', (TType.STRUCT,(bubble_info_t, bubble_info_t.thrift_spec)), None, ), # 4
    (5, TType.MAP, 'bubble_item', (TType.I16,None,TType.LIST,(TType.STRUCT,(bubble_info_t, bubble_info_t.thrift_spec))), None, ), # 5
    (6, TType.I16, 'round_type', None, -1, ), # 6
  )

  def __init__(self, mode=thrift_spec[1][4], chinese_words=None, blank=None, bubble_info=None, bubble_item=None, round_type=thrift_spec[6][4],):
    self.mode = mode
    self.chinese_words = chinese_words
    self.blank = blank
    self.bubble_info = bubble_info
    self.bubble_item = bubble_item
    self.round_type = round_type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.mode = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.chinese_words = []
          (_etype99, _size96) = iprot.readListBegin()
          for _i100 in xrange(_size96):
            _elem101 = iprot.readString();
            self.chinese_words.append(_elem101)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.blank = []
          (_etype105, _size102) = iprot.readListBegin()
          for _i106 in xrange(_size102):
            _elem107 = iprot.readI32();
            self.blank.append(_elem107)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.bubble_info = []
          (_etype111, _size108) = iprot.readListBegin()
          for _i112 in xrange(_size108):
            _elem113 = bubble_info_t()
            _elem113.read(iprot)
            self.bubble_info.append(_elem113)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.MAP:
          self.bubble_item = {}
          (_ktype115, _vtype116, _size114 ) = iprot.readMapBegin()
          for _i118 in xrange(_size114):
            _key119 = iprot.readI16();
            _val120 = []
            (_etype124, _size121) = iprot.readListBegin()
            for _i125 in xrange(_size121):
              _elem126 = bubble_info_t()
              _elem126.read(iprot)
              _val120.append(_elem126)
            iprot.readListEnd()
            self.bubble_item[_key119] = _val120
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I16:
          self.round_type = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('start_round_ret_t')
    if self.mode is not None:
      oprot.writeFieldBegin('mode', TType.I16, 1)
      oprot.writeI16(self.mode)
      oprot.writeFieldEnd()
    if self.chinese_words is not None:
      oprot.writeFieldBegin('chinese_words', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.chinese_words))
      for iter127 in self.chinese_words:
        oprot.writeString(iter127)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.blank is not None:
      oprot.writeFieldBegin('blank', TType.LIST, 3)
      oprot.writeListBegin(TType.I32, len(self.blank))
      for iter128 in self.blank:
        oprot.writeI32(iter128)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.bubble_info is not None:
      oprot.writeFieldBegin('bubble_info', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.bubble_info))
      for iter129 in self.bubble_info:
        iter129.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.bubble_item is not None:
      oprot.writeFieldBegin('bubble_item', TType.MAP, 5)
      oprot.writeMapBegin(TType.I16, TType.LIST, len(self.bubble_item))
      for kiter130,viter131 in self.bubble_item.items():
        oprot.writeI16(kiter130)
        oprot.writeListBegin(TType.STRUCT, len(viter131))
        for iter132 in viter131:
          iter132.write(oprot)
        oprot.writeListEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.round_type is not None:
      oprot.writeFieldBegin('round_type', TType.I16, 6)
      oprot.writeI16(self.round_type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class input_req_t:
  """
  Attributes:
   - input
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'input', (TType.I32,None), None, ), # 1
  )

  def __init__(self, input=None,):
    self.input = input

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.input = []
          (_etype136, _size133) = iprot.readListBegin()
          for _i137 in xrange(_size133):
            _elem138 = iprot.readI32();
            self.input.append(_elem138)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('input_req_t')
    if self.input is not None:
      oprot.writeFieldBegin('input', TType.LIST, 1)
      oprot.writeListBegin(TType.I32, len(self.input))
      for iter139 in self.input:
        oprot.writeI32(iter139)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class select_item_bubble_req_t:
  """
  Attributes:
   - bubble_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'bubble_id', None, 0, ), # 1
  )

  def __init__(self, bubble_id=thrift_spec[1][4],):
    self.bubble_id = bubble_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.bubble_id = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('select_item_bubble_req_t')
    if self.bubble_id is not None:
      oprot.writeFieldBegin('bubble_id', TType.I16, 1)
      oprot.writeI16(self.bubble_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class next_word_t:
  """
  Attributes:
   - answer_flag
   - inc_coin
   - uid
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'answer_flag', None, False, ), # 1
    (2, TType.I16, 'inc_coin', None, 0, ), # 2
    None, # 3
    (4, TType.I32, 'uid', None, 0, ), # 4
  )

  def __init__(self, answer_flag=thrift_spec[1][4], inc_coin=thrift_spec[2][4], uid=thrift_spec[4][4],):
    self.answer_flag = answer_flag
    self.inc_coin = inc_coin
    self.uid = uid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.answer_flag = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.inc_coin = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.uid = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('next_word_t')
    if self.answer_flag is not None:
      oprot.writeFieldBegin('answer_flag', TType.BOOL, 1)
      oprot.writeBool(self.answer_flag)
      oprot.writeFieldEnd()
    if self.inc_coin is not None:
      oprot.writeFieldBegin('inc_coin', TType.I16, 2)
      oprot.writeI16(self.inc_coin)
      oprot.writeFieldEnd()
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I32, 4)
      oprot.writeI32(self.uid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class end_round_ret_t:
  """
  Attributes:
   - win
   - inc_star
   - inc_exp
   - cur_level
   - inc_items
   - right_num
   - wrong_words
   - inc_coin
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'win', None, False, ), # 1
    (2, TType.I32, 'inc_star', None, 0, ), # 2
    (3, TType.I32, 'inc_exp', None, 0, ), # 3
    (4, TType.I32, 'cur_level', None, 0, ), # 4
    (5, TType.MAP, 'inc_items', (TType.I32,None,TType.I32,None), None, ), # 5
    (6, TType.I16, 'right_num', None, 0, ), # 6
    (7, TType.LIST, 'wrong_words', (TType.STRING,None), None, ), # 7
    (8, TType.I32, 'inc_coin', None, 0, ), # 8
  )

  def __init__(self, win=thrift_spec[1][4], inc_star=thrift_spec[2][4], inc_exp=thrift_spec[3][4], cur_level=thrift_spec[4][4], inc_items=None, right_num=thrift_spec[6][4], wrong_words=None, inc_coin=thrift_spec[8][4],):
    self.win = win
    self.inc_star = inc_star
    self.inc_exp = inc_exp
    self.cur_level = cur_level
    self.inc_items = inc_items
    self.right_num = right_num
    self.wrong_words = wrong_words
    self.inc_coin = inc_coin

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.win = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.inc_star = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.inc_exp = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.cur_level = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.MAP:
          self.inc_items = {}
          (_ktype141, _vtype142, _size140 ) = iprot.readMapBegin()
          for _i144 in xrange(_size140):
            _key145 = iprot.readI32();
            _val146 = iprot.readI32();
            self.inc_items[_key145] = _val146
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I16:
          self.right_num = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.wrong_words = []
          (_etype150, _size147) = iprot.readListBegin()
          for _i151 in xrange(_size147):
            _elem152 = iprot.readString();
            self.wrong_words.append(_elem152)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.inc_coin = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('end_round_ret_t')
    if self.win is not None:
      oprot.writeFieldBegin('win', TType.BOOL, 1)
      oprot.writeBool(self.win)
      oprot.writeFieldEnd()
    if self.inc_star is not None:
      oprot.writeFieldBegin('inc_star', TType.I32, 2)
      oprot.writeI32(self.inc_star)
      oprot.writeFieldEnd()
    if self.inc_exp is not None:
      oprot.writeFieldBegin('inc_exp', TType.I32, 3)
      oprot.writeI32(self.inc_exp)
      oprot.writeFieldEnd()
    if self.cur_level is not None:
      oprot.writeFieldBegin('cur_level', TType.I32, 4)
      oprot.writeI32(self.cur_level)
      oprot.writeFieldEnd()
    if self.inc_items is not None:
      oprot.writeFieldBegin('inc_items', TType.MAP, 5)
      oprot.writeMapBegin(TType.I32, TType.I32, len(self.inc_items))
      for kiter153,viter154 in self.inc_items.items():
        oprot.writeI32(kiter153)
        oprot.writeI32(viter154)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.right_num is not None:
      oprot.writeFieldBegin('right_num', TType.I16, 6)
      oprot.writeI16(self.right_num)
      oprot.writeFieldEnd()
    if self.wrong_words is not None:
      oprot.writeFieldBegin('wrong_words', TType.LIST, 7)
      oprot.writeListBegin(TType.STRING, len(self.wrong_words))
      for iter155 in self.wrong_words:
        oprot.writeString(iter155)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.inc_coin is not None:
      oprot.writeFieldBegin('inc_coin', TType.I32, 8)
      oprot.writeI32(self.inc_coin)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class update_property_ret_t:
  """
  Attributes:
   - exp
   - level
   - coin
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'exp', None, 0, ), # 1
    (2, TType.I32, 'level', None, 0, ), # 2
    (3, TType.I32, 'coin', None, 0, ), # 3
  )

  def __init__(self, exp=thrift_spec[1][4], level=thrift_spec[2][4], coin=thrift_spec[3][4],):
    self.exp = exp
    self.level = level
    self.coin = coin

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.exp = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.level = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.coin = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('update_property_ret_t')
    if self.exp is not None:
      oprot.writeFieldBegin('exp', TType.I32, 1)
      oprot.writeI32(self.exp)
      oprot.writeFieldEnd()
    if self.level is not None:
      oprot.writeFieldBegin('level', TType.I32, 2)
      oprot.writeI32(self.level)
      oprot.writeFieldEnd()
    if self.coin is not None:
      oprot.writeFieldBegin('coin', TType.I32, 3)
      oprot.writeI32(self.coin)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class use_item_req_t:
  """
  Attributes:
   - item_type
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'item_type', None, 0, ), # 1
  )

  def __init__(self, item_type=thrift_spec[1][4],):
    self.item_type = item_type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.item_type = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('use_item_req_t')
    if self.item_type is not None:
      oprot.writeFieldBegin('item_type', TType.I16, 1)
      oprot.writeI16(self.item_type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class use_item_ret_t:
  """
  Attributes:
   - item_type
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'item_type', None, 0, ), # 1
  )

  def __init__(self, item_type=thrift_spec[1][4],):
    self.item_type = item_type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.item_type = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('use_item_ret_t')
    if self.item_type is not None:
      oprot.writeFieldBegin('item_type', TType.I16, 1)
      oprot.writeI16(self.item_type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class battle_create_req_t:
  """
  Attributes:
   - mode
   - friend_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'mode', None, 0, ), # 1
    (2, TType.I32, 'friend_id', None, 0, ), # 2
  )

  def __init__(self, mode=thrift_spec[1][4], friend_id=thrift_spec[2][4],):
    self.mode = mode
    self.friend_id = friend_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.mode = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.friend_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('battle_create_req_t')
    if self.mode is not None:
      oprot.writeFieldBegin('mode', TType.I16, 1)
      oprot.writeI16(self.mode)
      oprot.writeFieldEnd()
    if self.friend_id is not None:
      oprot.writeFieldBegin('friend_id', TType.I32, 2)
      oprot.writeI32(self.friend_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class battle_quit_req_t:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('battle_quit_req_t')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class battle_ready_req_t:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('battle_ready_req_t')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class battle_ready_ret_t:
  """
  Attributes:
   - uid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'uid', None, 0, ), # 1
  )

  def __init__(self, uid=thrift_spec[1][4],):
    self.uid = uid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.uid = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('battle_ready_ret_t')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I32, 1)
      oprot.writeI32(self.uid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class battle_create_ret_t:
  """
  Attributes:
   - dest_id
   - dest_name
   - dest_grade
   - dest_level
   - gender
   - result
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'dest_id', None, 0, ), # 1
    (2, TType.STRING, 'dest_name', None, None, ), # 2
    (3, TType.STRING, 'dest_grade', None, None, ), # 3
    (4, TType.I32, 'dest_level', None, None, ), # 4
    (5, TType.I16, 'gender', None, 0, ), # 5
    (6, TType.I16, 'result', None, 0, ), # 6
  )

  def __init__(self, dest_id=thrift_spec[1][4], dest_name=None, dest_grade=None, dest_level=None, gender=thrift_spec[5][4], result=thrift_spec[6][4],):
    self.dest_id = dest_id
    self.dest_name = dest_name
    self.dest_grade = dest_grade
    self.dest_level = dest_level
    self.gender = gender
    self.result = result

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.dest_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.dest_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.dest_grade = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.dest_level = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I16:
          self.gender = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I16:
          self.result = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('battle_create_ret_t')
    if self.dest_id is not None:
      oprot.writeFieldBegin('dest_id', TType.I32, 1)
      oprot.writeI32(self.dest_id)
      oprot.writeFieldEnd()
    if self.dest_name is not None:
      oprot.writeFieldBegin('dest_name', TType.STRING, 2)
      oprot.writeString(self.dest_name)
      oprot.writeFieldEnd()
    if self.dest_grade is not None:
      oprot.writeFieldBegin('dest_grade', TType.STRING, 3)
      oprot.writeString(self.dest_grade)
      oprot.writeFieldEnd()
    if self.dest_level is not None:
      oprot.writeFieldBegin('dest_level', TType.I32, 4)
      oprot.writeI32(self.dest_level)
      oprot.writeFieldEnd()
    if self.gender is not None:
      oprot.writeFieldBegin('gender', TType.I16, 5)
      oprot.writeI16(self.gender)
      oprot.writeFieldEnd()
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I16, 6)
      oprot.writeI16(self.result)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class battle_close_ret_t:
  """
  Attributes:
   - win
   - flag
   - self_result
   - dest_result
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'win', None, False, ), # 1
    (2, TType.I16, 'flag', None, 0, ), # 2
    (3, TType.STRUCT, 'self_result', (end_round_ret_t, end_round_ret_t.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'dest_result', (end_round_ret_t, end_round_ret_t.thrift_spec), None, ), # 4
  )

  def __init__(self, win=thrift_spec[1][4], flag=thrift_spec[2][4], self_result=None, dest_result=None,):
    self.win = win
    self.flag = flag
    self.self_result = self_result
    self.dest_result = dest_result

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.win = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.flag = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.self_result = end_round_ret_t()
          self.self_result.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.dest_result = end_round_ret_t()
          self.dest_result.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('battle_close_ret_t')
    if self.win is not None:
      oprot.writeFieldBegin('win', TType.BOOL, 1)
      oprot.writeBool(self.win)
      oprot.writeFieldEnd()
    if self.flag is not None:
      oprot.writeFieldBegin('flag', TType.I16, 2)
      oprot.writeI16(self.flag)
      oprot.writeFieldEnd()
    if self.self_result is not None:
      oprot.writeFieldBegin('self_result', TType.STRUCT, 3)
      self.self_result.write(oprot)
      oprot.writeFieldEnd()
    if self.dest_result is not None:
      oprot.writeFieldBegin('dest_result', TType.STRUCT, 4)
      self.dest_result.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class click_bubble_req_t:
  """
  Attributes:
   - bubble_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'bubble_id', None, 0, ), # 1
  )

  def __init__(self, bubble_id=thrift_spec[1][4],):
    self.bubble_id = bubble_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.bubble_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('click_bubble_req_t')
    if self.bubble_id is not None:
      oprot.writeFieldBegin('bubble_id', TType.I32, 1)
      oprot.writeI32(self.bubble_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class click_bubble_ret_t:
  """
  Attributes:
   - uid
   - bubble_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'uid', None, 0, ), # 1
    (2, TType.I32, 'bubble_id', None, 0, ), # 2
  )

  def __init__(self, uid=thrift_spec[1][4], bubble_id=thrift_spec[2][4],):
    self.uid = uid
    self.bubble_id = bubble_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.uid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.bubble_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('click_bubble_ret_t')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I32, 1)
      oprot.writeI32(self.uid)
      oprot.writeFieldEnd()
    if self.bubble_id is not None:
      oprot.writeFieldBegin('bubble_id', TType.I32, 2)
      oprot.writeI32(self.bubble_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class battle_invite_ret_t:
  """
  Attributes:
   - dest_id
   - dest_name
   - dest_grade
   - dest_level
   - gender
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'dest_id', None, 0, ), # 1
    (2, TType.STRING, 'dest_name', None, None, ), # 2
    (3, TType.STRING, 'dest_grade', None, None, ), # 3
    (4, TType.I32, 'dest_level', None, None, ), # 4
    (5, TType.I16, 'gender', None, 0, ), # 5
  )

  def __init__(self, dest_id=thrift_spec[1][4], dest_name=None, dest_grade=None, dest_level=None, gender=thrift_spec[5][4],):
    self.dest_id = dest_id
    self.dest_name = dest_name
    self.dest_grade = dest_grade
    self.dest_level = dest_level
    self.gender = gender

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.dest_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.dest_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.dest_grade = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.dest_level = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I16:
          self.gender = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('battle_invite_ret_t')
    if self.dest_id is not None:
      oprot.writeFieldBegin('dest_id', TType.I32, 1)
      oprot.writeI32(self.dest_id)
      oprot.writeFieldEnd()
    if self.dest_name is not None:
      oprot.writeFieldBegin('dest_name', TType.STRING, 2)
      oprot.writeString(self.dest_name)
      oprot.writeFieldEnd()
    if self.dest_grade is not None:
      oprot.writeFieldBegin('dest_grade', TType.STRING, 3)
      oprot.writeString(self.dest_grade)
      oprot.writeFieldEnd()
    if self.dest_level is not None:
      oprot.writeFieldBegin('dest_level', TType.I32, 4)
      oprot.writeI32(self.dest_level)
      oprot.writeFieldEnd()
    if self.gender is not None:
      oprot.writeFieldBegin('gender', TType.I16, 5)
      oprot.writeI16(self.gender)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class battle_invite_accept_req_t:
  """
  Attributes:
   - dest_id
   - accept_flag
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'dest_id', None, 0, ), # 1
    (2, TType.BOOL, 'accept_flag', None, False, ), # 2
  )

  def __init__(self, dest_id=thrift_spec[1][4], accept_flag=thrift_spec[2][4],):
    self.dest_id = dest_id
    self.accept_flag = accept_flag

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.dest_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.accept_flag = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('battle_invite_accept_req_t')
    if self.dest_id is not None:
      oprot.writeFieldBegin('dest_id', TType.I32, 1)
      oprot.writeI32(self.dest_id)
      oprot.writeFieldEnd()
    if self.accept_flag is not None:
      oprot.writeFieldBegin('accept_flag', TType.BOOL, 2)
      oprot.writeBool(self.accept_flag)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class search_user_req_t:
  """
  Attributes:
   - name
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
  )

  def __init__(self, name=None,):
    self.name = name

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('search_user_req_t')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class search_user_ret_t:
  """
  Attributes:
   - uid
   - name
   - status
   - grade
   - level
   - gender
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'uid', None, 0, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.I16, 'status', None, 0, ), # 3
    (4, TType.STRING, 'grade', None, None, ), # 4
    (5, TType.I32, 'level', None, 0, ), # 5
    (6, TType.I16, 'gender', None, 0, ), # 6
  )

  def __init__(self, uid=thrift_spec[1][4], name=None, status=thrift_spec[3][4], grade=None, level=thrift_spec[5][4], gender=thrift_spec[6][4],):
    self.uid = uid
    self.name = name
    self.status = status
    self.grade = grade
    self.level = level
    self.gender = gender

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.uid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.status = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.grade = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.level = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I16:
          self.gender = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('search_user_ret_t')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I32, 1)
      oprot.writeI32(self.uid)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I16, 3)
      oprot.writeI16(self.status)
      oprot.writeFieldEnd()
    if self.grade is not None:
      oprot.writeFieldBegin('grade', TType.STRING, 4)
      oprot.writeString(self.grade)
      oprot.writeFieldEnd()
    if self.level is not None:
      oprot.writeFieldBegin('level', TType.I32, 5)
      oprot.writeI32(self.level)
      oprot.writeFieldEnd()
    if self.gender is not None:
      oprot.writeFieldBegin('gender', TType.I16, 6)
      oprot.writeI16(self.gender)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
