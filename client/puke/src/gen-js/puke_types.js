//
// Autogenerated by Thrift Compiler (0.9.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

client_cmd_e = {
'CHUPAI_REQ' : 1,
'CHAT_REQ' : 2,
'READY_REQ' : 3,
'PASS_REQ' : 4,
'QUIT_REQ' : 5,
'JOIN_TABLE_REQ' : 6
};
server_cmd_e = {
'CHUPAI_RET' : 1,
'CHAT_RET' : 2,
'READY_RET' : 3,
'PASS_RET' : 4,
'QUIT_RET' : 5,
'ROOM_RET' : 6,
'JOIN_TABLE_RET' : 7,
'ALLOC_PUKE_RET' : 8,
'CHANGE_TURN' : 9
};
table_info_ret_t = function(args) {
  this.all_names = null;
  if (args) {
    if (args.all_names !== undefined) {
      this.all_names = args.all_names;
    }
  }
};
table_info_ret_t.prototype = {};
table_info_ret_t.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.all_names = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString().value;
          this.all_names.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

table_info_ret_t.prototype.write = function(output) {
  output.writeStructBegin('table_info_ret_t');
  if (this.all_names !== null && this.all_names !== undefined) {
    output.writeFieldBegin('all_names', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.all_names.length);
    for (var iter7 in this.all_names)
    {
      if (this.all_names.hasOwnProperty(iter7))
      {
        iter7 = this.all_names[iter7];
        output.writeString(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

room_info_ret_t = function(args) {
  this.all_tables = null;
  this.nCurRoomIndex = -1;
  this.nCurTableIndex = -1;
  if (args) {
    if (args.all_tables !== undefined) {
      this.all_tables = args.all_tables;
    }
    if (args.nCurRoomIndex !== undefined) {
      this.nCurRoomIndex = args.nCurRoomIndex;
    }
    if (args.nCurTableIndex !== undefined) {
      this.nCurTableIndex = args.nCurTableIndex;
    }
  }
};
room_info_ret_t.prototype = {};
room_info_ret_t.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.all_tables = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new table_info_ret_t();
          elem14.read(input);
          this.all_tables.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.nCurRoomIndex = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.nCurTableIndex = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

room_info_ret_t.prototype.write = function(output) {
  output.writeStructBegin('room_info_ret_t');
  if (this.all_tables !== null && this.all_tables !== undefined) {
    output.writeFieldBegin('all_tables', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.all_tables.length);
    for (var iter15 in this.all_tables)
    {
      if (this.all_tables.hasOwnProperty(iter15))
      {
        iter15 = this.all_tables[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.nCurRoomIndex !== null && this.nCurRoomIndex !== undefined) {
    output.writeFieldBegin('nCurRoomIndex', Thrift.Type.I32, 2);
    output.writeI32(this.nCurRoomIndex);
    output.writeFieldEnd();
  }
  if (this.nCurTableIndex !== null && this.nCurTableIndex !== undefined) {
    output.writeFieldBegin('nCurTableIndex', Thrift.Type.I32, 3);
    output.writeI32(this.nCurTableIndex);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

alloc_puke_ret_t = function(args) {
  this.nAllocIndex = 0;
  this.listPuke = null;
  if (args) {
    if (args.nAllocIndex !== undefined) {
      this.nAllocIndex = args.nAllocIndex;
    }
    if (args.listPuke !== undefined) {
      this.listPuke = args.listPuke;
    }
  }
};
alloc_puke_ret_t.prototype = {};
alloc_puke_ret_t.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.nAllocIndex = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.listPuke = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = input.readI32().value;
          this.listPuke.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

alloc_puke_ret_t.prototype.write = function(output) {
  output.writeStructBegin('alloc_puke_ret_t');
  if (this.nAllocIndex !== null && this.nAllocIndex !== undefined) {
    output.writeFieldBegin('nAllocIndex', Thrift.Type.I32, 1);
    output.writeI32(this.nAllocIndex);
    output.writeFieldEnd();
  }
  if (this.listPuke !== null && this.listPuke !== undefined) {
    output.writeFieldBegin('listPuke', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.listPuke.length);
    for (var iter23 in this.listPuke)
    {
      if (this.listPuke.hasOwnProperty(iter23))
      {
        iter23 = this.listPuke[iter23];
        output.writeI32(iter23);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

join_table_req_t = function(args) {
  this.table_index = 0;
  if (args) {
    if (args.table_index !== undefined) {
      this.table_index = args.table_index;
    }
  }
};
join_table_req_t.prototype = {};
join_table_req_t.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I16) {
        this.table_index = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

join_table_req_t.prototype.write = function(output) {
  output.writeStructBegin('join_table_req_t');
  if (this.table_index !== null && this.table_index !== undefined) {
    output.writeFieldBegin('table_index', Thrift.Type.I16, 1);
    output.writeI16(this.table_index);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

join_talbe_ret_t = function(args) {
  this.room_info_ret = null;
  if (args) {
    if (args.room_info_ret !== undefined) {
      this.room_info_ret = args.room_info_ret;
    }
  }
};
join_talbe_ret_t.prototype = {};
join_talbe_ret_t.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.room_info_ret = new room_info_ret_t();
        this.room_info_ret.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

join_talbe_ret_t.prototype.write = function(output) {
  output.writeStructBegin('join_talbe_ret_t');
  if (this.room_info_ret !== null && this.room_info_ret !== undefined) {
    output.writeFieldBegin('room_info_ret', Thrift.Type.STRUCT, 1);
    this.room_info_ret.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

chagne_turn_ret_t = function(args) {
  this.turn_index = 0;
  if (args) {
    if (args.turn_index !== undefined) {
      this.turn_index = args.turn_index;
    }
  }
};
chagne_turn_ret_t.prototype = {};
chagne_turn_ret_t.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I16) {
        this.turn_index = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

chagne_turn_ret_t.prototype.write = function(output) {
  output.writeStructBegin('chagne_turn_ret_t');
  if (this.turn_index !== null && this.turn_index !== undefined) {
    output.writeFieldBegin('turn_index', Thrift.Type.I16, 1);
    output.writeI16(this.turn_index);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

chat_req_t = function(args) {
  this.content = null;
  if (args) {
    if (args.content !== undefined) {
      this.content = args.content;
    }
  }
};
chat_req_t.prototype = {};
chat_req_t.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

chat_req_t.prototype.write = function(output) {
  output.writeStructBegin('chat_req_t');
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 1);
    output.writeString(this.content);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

chat_ret_t = function(args) {
  this.content = null;
  this.name = null;
  this.flag = 0;
  if (args) {
    if (args.content !== undefined) {
      this.content = args.content;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.flag !== undefined) {
      this.flag = args.flag;
    }
  }
};
chat_ret_t.prototype = {};
chat_ret_t.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.flag = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

chat_ret_t.prototype.write = function(output) {
  output.writeStructBegin('chat_ret_t');
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 1);
    output.writeString(this.content);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.flag !== null && this.flag !== undefined) {
    output.writeFieldBegin('flag', Thrift.Type.I16, 3);
    output.writeI16(this.flag);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

show_puke_req_t = function(args) {
  this.nTableIndex = 0;
  this.listPuke = null;
  if (args) {
    if (args.nTableIndex !== undefined) {
      this.nTableIndex = args.nTableIndex;
    }
    if (args.listPuke !== undefined) {
      this.listPuke = args.listPuke;
    }
  }
};
show_puke_req_t.prototype = {};
show_puke_req_t.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.nTableIndex = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.listPuke = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = input.readI32().value;
          this.listPuke.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

show_puke_req_t.prototype.write = function(output) {
  output.writeStructBegin('show_puke_req_t');
  if (this.nTableIndex !== null && this.nTableIndex !== undefined) {
    output.writeFieldBegin('nTableIndex', Thrift.Type.I32, 1);
    output.writeI32(this.nTableIndex);
    output.writeFieldEnd();
  }
  if (this.listPuke !== null && this.listPuke !== undefined) {
    output.writeFieldBegin('listPuke', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.listPuke.length);
    for (var iter31 in this.listPuke)
    {
      if (this.listPuke.hasOwnProperty(iter31))
      {
        iter31 = this.listPuke[iter31];
        output.writeI32(iter31);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

show_puke_ret_t = function(args) {
  this.nTableIndex = 0;
  this.listPuke = null;
  if (args) {
    if (args.nTableIndex !== undefined) {
      this.nTableIndex = args.nTableIndex;
    }
    if (args.listPuke !== undefined) {
      this.listPuke = args.listPuke;
    }
  }
};
show_puke_ret_t.prototype = {};
show_puke_ret_t.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.nTableIndex = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.listPuke = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = input.readI32().value;
          this.listPuke.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

show_puke_ret_t.prototype.write = function(output) {
  output.writeStructBegin('show_puke_ret_t');
  if (this.nTableIndex !== null && this.nTableIndex !== undefined) {
    output.writeFieldBegin('nTableIndex', Thrift.Type.I32, 1);
    output.writeI32(this.nTableIndex);
    output.writeFieldEnd();
  }
  if (this.listPuke !== null && this.listPuke !== undefined) {
    output.writeFieldBegin('listPuke', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.listPuke.length);
    for (var iter39 in this.listPuke)
    {
      if (this.listPuke.hasOwnProperty(iter39))
      {
        iter39 = this.listPuke[iter39];
        output.writeI32(iter39);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ready_req_t = function(args) {
  this.nTableIndex = 0;
  if (args) {
    if (args.nTableIndex !== undefined) {
      this.nTableIndex = args.nTableIndex;
    }
  }
};
ready_req_t.prototype = {};
ready_req_t.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.nTableIndex = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ready_req_t.prototype.write = function(output) {
  output.writeStructBegin('ready_req_t');
  if (this.nTableIndex !== null && this.nTableIndex !== undefined) {
    output.writeFieldBegin('nTableIndex', Thrift.Type.I32, 1);
    output.writeI32(this.nTableIndex);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ready_ret_t = function(args) {
  this.listReady = null;
  if (args) {
    if (args.listReady !== undefined) {
      this.listReady = args.listReady;
    }
  }
};
ready_ret_t.prototype = {};
ready_ret_t.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.listReady = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = input.readI32().value;
          this.listReady.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ready_ret_t.prototype.write = function(output) {
  output.writeStructBegin('ready_ret_t');
  if (this.listReady !== null && this.listReady !== undefined) {
    output.writeFieldBegin('listReady', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.listReady.length);
    for (var iter47 in this.listReady)
    {
      if (this.listReady.hasOwnProperty(iter47))
      {
        iter47 = this.listReady[iter47];
        output.writeI32(iter47);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

pass_req_t = function(args) {
  this.nTableIndex = 0;
  if (args) {
    if (args.nTableIndex !== undefined) {
      this.nTableIndex = args.nTableIndex;
    }
  }
};
pass_req_t.prototype = {};
pass_req_t.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.nTableIndex = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

pass_req_t.prototype.write = function(output) {
  output.writeStructBegin('pass_req_t');
  if (this.nTableIndex !== null && this.nTableIndex !== undefined) {
    output.writeFieldBegin('nTableIndex', Thrift.Type.I32, 1);
    output.writeI32(this.nTableIndex);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

pass_ret_t = function(args) {
  this.nTableIndex = 0;
  if (args) {
    if (args.nTableIndex !== undefined) {
      this.nTableIndex = args.nTableIndex;
    }
  }
};
pass_ret_t.prototype = {};
pass_ret_t.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.nTableIndex = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

pass_ret_t.prototype.write = function(output) {
  output.writeStructBegin('pass_ret_t');
  if (this.nTableIndex !== null && this.nTableIndex !== undefined) {
    output.writeFieldBegin('nTableIndex', Thrift.Type.I32, 1);
    output.writeI32(this.nTableIndex);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

quit_req_t = function(args) {
  this.nTableIndex = 0;
  if (args) {
    if (args.nTableIndex !== undefined) {
      this.nTableIndex = args.nTableIndex;
    }
  }
};
quit_req_t.prototype = {};
quit_req_t.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.nTableIndex = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

quit_req_t.prototype.write = function(output) {
  output.writeStructBegin('quit_req_t');
  if (this.nTableIndex !== null && this.nTableIndex !== undefined) {
    output.writeFieldBegin('nTableIndex', Thrift.Type.I32, 1);
    output.writeI32(this.nTableIndex);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

quit_ret_t = function(args) {
  this.nTableIndex = 0;
  if (args) {
    if (args.nTableIndex !== undefined) {
      this.nTableIndex = args.nTableIndex;
    }
  }
};
quit_ret_t.prototype = {};
quit_ret_t.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.nTableIndex = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

quit_ret_t.prototype.write = function(output) {
  output.writeStructBegin('quit_ret_t');
  if (this.nTableIndex !== null && this.nTableIndex !== undefined) {
    output.writeFieldBegin('nTableIndex', Thrift.Type.I32, 1);
    output.writeI32(this.nTableIndex);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

